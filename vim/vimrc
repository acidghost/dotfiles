set nocompatible   " Disable vi compatibilty
set encoding=utf-8 " Use UTF-8
syntax enable      " Turn on syntax highlighting
set showmatch      " Show matching brackets
set ignorecase     " Do case insensitive matching
set number         " Show numbers
set relativenumber " Show relative numbers
set undolevels=999 " Lots of these
set hlsearch       " Highlight Search
set tabstop=4      " Tab size
set shiftwidth=4   " Indentation size
set softtabstop=4  " Tabs/Spaces interop
set expandtab      " Expands tab to spaces
set nomodeline     " Disable as a security precaution
set mouse=a        " Enable mouse mode
set autoindent     " Enable autoindent
set complete-=i    " Better completion
set laststatus=2   " Always show status line
set ruler          " Show cursor position
set scrolloff=3    " Scroll offset
set sidescrolloff=5
set autoread       " Reload files on change
set history=1000   " More history
set list           " Highlight non whitespace characters
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<
set noshowmode     " Hide mode in bottom line given lightline
set colorcolumn=100 " Vertical column

" allow .vimrc files to reside in project folders
set exrc
set secure

if exists('+termguicolors')
    let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
    "set termguicolors
endif

if $TERM == "rxvt-unicode-256color"
    set notermguicolors     " Disable true colors (urxvt fix)
endif


" Install VimPlug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if filereadable(expand('/opt/homebrew/opt/fzf/plugin/fzf.vim'))
    set rtp+=/opt/homebrew/opt/fzf
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
Plug 'itchyny/lightline.vim'
Plug 'tinted-theming/base16-vim'
" Should be installed system-wide, uncomment otherwise
" Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'scrooloose/nerdTree'
Plug 'liuchengxu/vista.vim'
Plug 'machakann/vim-sandwich'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-commentary'
Plug 'dhruvasagar/vim-prosession'

" Language / syntax support
if has('nvim')
    if has('nvim-0.9.2')
        Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate' }
    elseif has('nvim-0.9.1')
        Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate',
            \ 'commit': 'f197a15b0d1e8d555263af20add51450e5aaa1f0' }
    else
        Plug 'nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate',
            \ 'commit': '63260da18bf273c76b8e2ea0db84eb901cab49ce' }
    endif
    if has('nvim-0.7')
        Plug 'LhKipp/nvim-nu', { 'do': ':TSInstall nu' }
        Plug 'Olical/conjure'
    endif
endif
Plug 'vim-latex/vim-latex'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'souffle-lang/souffle.vim'
Plug 'aliou/bats.vim'

" Completions
if has('nvim')
    Plug 'hrsh7th/cmp-buffer'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-cmdline'
    Plug 'hrsh7th/nvim-cmp'
    if has('nvim-0.7')
        Plug 'hrsh7th/nvim-cmp'
    else
        Plug 'hrsh7th/nvim-cmp', { 'commit': 'bba6fb67fdafc0af7c5454058dfbabc2182741f4' }
    endif
endif

if filereadable(expand("~/.vim/lsp_plugins.vim"))
    source ~/.vim/lsp_plugins.vim
endif

" Snippets
if has('nvim')
Plug 'hrsh7th/cmp-vsnip'
Plug 'hrsh7th/vim-vsnip'
endif

if has('nvim-0.6')
    Plug 'github/copilot.vim'
endif

Plug 'johnstef99/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'

call plug#end()


if !has('gui_running')
    set t_Co=256
endif

let mapleader = ","
let maplocalleader = "<"

" base16
function! s:base16_customize() abort
    call Base16hi("Identifier", g:base16_gui05, "", g:base16_cterm05, "", "none", "")
endfunction

augroup on_change_colorschema
    autocmd!
    autocmd ColorScheme * call s:base16_customize()
augroup END

if exists('$BASE16_THEME')
    \ && (!exists('g:colors_name') || g:colors_name != 'base16-$BASE16_THEME')
    let base16colorspace=256
    colorscheme base16-$BASE16_THEME
endif

" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/swap') == 0
    call mkdir($HOME.'/.vim/swap', 'p')
endif
set directory=./.vim-swap//
set directory+=~/.vim/swap//
set directory+=~/tmp//
set directory+=.

" Alternative ctags filename
set tags+=.tags

" Lightline configuration
let g:lightline = {
    \ 'colorscheme': 'Tomorrow_Night_Blue',
    \ 'enable': { 'tabline': 1, 'statusline': 1 },
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'relativepath', 'modified', 'method' ],
    \             [ 'obsession' ] ]
    \ },
    \ 'inactive': {
    \   'left': [ [ 'relativepath' ] ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ] ]
    \ },
    \ 'component': {
    \   'obsession': '%{ObsessionStatus("", "")}',
    \ },
    \ 'component_function': {
    \   'method': 'NearestMethodOrFunction',
    \   'filetype': 'DevIconsFiletype',
    \   'fileformat': 'DevIconsFileformat',
    \ },
    \ 'tabline': {
    \   'left': [ [ 'tabs' ] ],
    \   'right': [ [ 'close' ] ]
    \ }
    \ }

" Custom Lightline palettes
let s:palette = g:lightline#colorscheme#Tomorrow_Night_Blue#palette
let s:palette.tabline.middle = [['#ffffff', '#606087', 231, 60]]
let s:palette.tabline.right  = [['#ffffff', '#606087', 231, 60]]
let s:palette.tabline.tabsel = [['#ffffff', '#af5fff', 231, 135]]

if filereadable(expand("~/.vim/lsp.vim"))
    source ~/.vim/lsp.vim
endif

" Prosession config
let g:prosession_tmux_title = 1
let g:prosession_tmux_title_format = ":@@@"
let g:prosession_on_startup = 1

" vista.vim
let g:vista_update_on_text_changed = 1
let g:vista_fzf_preview = ['right:50%']
function! NearestMethodOrFunction() abort
    return get(b:, 'vista_nearest_method_or_function', '')
endfunction

" devicons
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''
function! DevIconsFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction
function! DevIconsFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

" FZF
command! -bang -nargs=* RgPreview
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
    \   fzf#vim#with_preview(), <bang>0)

""" vim-latex
let g:tex_flavor='latex'

""" nvim-treesitter
if has('nvim')
lua << EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = {
        "awk",
        "c",
        "go",
        "latex",
        "llvm",
        "lua",
        "perl",
        "python",
        "rust",
        "toml",
        "vim",
        "vimdoc",
    },
    highlight = { enable = true },
    incremental_selection = {
        enable = true,
        keymaps = {
            init_selection = "gnn",
            node_incremental = "grn",
            scope_incremental = "grc",
            node_decremental = "grm",
        },
    },
}
EOF
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set nofoldenable                     " Disable folding at startup.
endif

" nvim-nu / nushell
if has('nvim')
lua << EOF
require'nu'.setup {
    use_lsp_features = false,
}
EOF
endif

" conjure
let g:conjure#filetypes = [
    \'clojure',
    \'fennel',
    \'janet',
    \'hy',
    \'julia',
    \'racket',
    \'scheme',
    \'lua',
    \'lisp',
    \'python'
    \]

" copilot
let g:copilot_filetypes = {
    \'markdown': v:false,
    \'tex': v:false,
    \'text': v:false,
    \}


""" Key mappings

" Yank to PRIMARY clipboard
noremap <Leader>y "*y
" Paste from PRIMARY clipboard
noremap <Leader>p "*p
" Yank to CLIPBOARD clipboard
noremap <Leader>Y "+y
" Paste from CLIPBOARD clipboard
noremap <Leader>P "+p

" Navigate quickfix list
noremap <Leader>eo :botright copen<CR>
noremap <Leader>ef :cfirst<CR>
noremap <Leader>en :cnext<CR>
noremap <Leader>ep :cprevious<CR>

nmap <Down> <C-E>
nmap <Up> <C-Y>
nmap <Left> 20zl
nmap <Right> 20zr

nmap <C-n>n :NERDTreeToggle<CR>
nmap <C-n>f :NERDTreeFocus<CR>
nmap <C-n>m :NERDTreeMirror<CR>
nmap <C-n>x :NERDTreeFind<CR>
nmap <C-n>r :NERDTreeRefreshRoot<CR>

nmap <C-p> :FZF<CR>
nmap <C-t>p :Tags<CR>
nmap <C-t>b :BTags<CR>
nmap <S-p> :FZF!<CR>
nmap <Leader>f :RgPreview<Space>
nmap <Leader>F :RgPreview!<Space>
nmap <Leader>g :GFiles<CR>
nmap <Leader>G :GFiles!<CR>
nmap <Leader>c :GFiles?<CR>
nmap <Leader>b :Buffers<CR>
cmap <C-h> :History:<CR>
nmap <C-h> :Helptags<CR>

nmap <C-s> :Obsession<CR>
nmap <C-s>s :Prosession<Space>
nmap <C-s>d :ProsessionDelete<CR>

nmap <Leader>v :Vista!!<CR>
nmap <Leader>vf :Vista finder<CR>
nmap <Leader>vs :Vista focus<CR>

noremap <Leader>@ :nohl<CR>
noremap <Leader>w :setl wrap!<CR>

noremap <Leader>W :Goyo<CR>

noremap <C-w>gn :tabnew %<CR>

imap <silent> <c-p> <Plug>(completion_trigger)

nnoremap <C-w>. :call MoveToNextTab()<CR><C-w>H
nnoremap <C-w>, :call MoveToPrevTab()<CR><C-w>H

autocmd BufRead,BufNewFile $HOME/.aliases set ft=sh
autocmd BufRead,BufNewFile $HOME/.path set ft=sh
autocmd BufRead,BufNewFile *.fc set ft=fennec
autocmd BufRead,BufNewFile *.ll set ft=llvm
autocmd BufRead,BufNewFile *.td set ft=tablegen
autocmd BufRead,BufNewFile *.rasi setf css
autocmd BufRead,BufNewFile Brewfile,Vagrantfile setf ruby
autocmd BufRead,BufNewFile *.vifm,vifmrc setf vim
autocmd BufRead,BufNewFile devcontainer.json set ft=jsonc

autocmd FileType go setlocal shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType cpp setlocal shiftwidth=2 tabstop=2
autocmd FileType cmake setlocal shiftwidth=2 tabstop=2
autocmd FileType org setlocal shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType nu setlocal shiftwidth=2 tabstop=2

" Useful utilities

command! DiffOrig vert new | set buftype=nofile | read ++edit # | 0d_
        \ | diffthis | wincmd p | diffthis

function! MoveToPrevTab()
    "there is only one window
    if tabpagenr('$') == 1 && winnr('$') == 1
        return
    endif
    "preparing new window
    let l:tab_nr = tabpagenr('$')
    let l:cur_buf = bufnr('%')
    if tabpagenr() != 1
        close!
        if l:tab_nr == tabpagenr('$')
            tabprev
        endif
        sp
    else
        close!
        exe "0tabnew"
    endif
    "opening current buffer in new window
    exe "b".l:cur_buf
endfunc

function! MoveToNextTab()
    "there is only one window
    if tabpagenr('$') == 1 && winnr('$') == 1
        return
    endif
    "preparing new window
    let l:tab_nr = tabpagenr('$')
    let l:cur_buf = bufnr('%')
    if tabpagenr() < tab_nr
        close!
        if l:tab_nr == tabpagenr('$')
            tabnext
        endif
        sp
    else
        close!
        tabnew
    endif
    "opening current buffer in new window
    exe "b".l:cur_buf
endfunc
