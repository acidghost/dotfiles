source ~/.vim/my/settings.vim

" Install VimPlug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if filereadable('/opt/homebrew/opt/fzf/plugin/fzf.vim')
    set rtp+=/opt/homebrew/opt/fzf
elseif filereadable('/usr/share/doc/fzf/examples/plugin/fzf.vim')
    set rtp+=/usr/share/doc/fzf/examples
endif

if isdirectory('/Applications/Ghostty.app/Contents/Resources/vim/vimfiles')
    set rtp+=/Applications/Ghostty.app/Contents/Resources/vim/vimfiles
endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
Plug 'itchyny/lightline.vim'
Plug 'tinted-theming/base16-vim'
" Should be installed system-wide, uncomment otherwise
" Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'machakann/vim-sandwich'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-commentary'
Plug 'dhruvasagar/vim-prosession'
Plug 'airblade/vim-gitgutter'
" Plug 'JuliaEditorSupport/julia-vim'
" Plug 'aliou/bats.vim'
Plug 'ryanoasis/vim-devicons'

call plug#end()


if !has('gui_running')
    set t_Co=256
endif

source ~/.vim/my/base16.vim

" Lightline configuration
let g:lightline = {
    \ 'colorscheme': 'Tomorrow_Night_Blue',
    \ 'enable': { 'tabline': 1, 'statusline': 1 },
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'relativepath', 'modified' ],
    \             [ 'obsession', 'gitstatus' ] ]
    \ },
    \ 'inactive': {
    \   'left': [ [ 'relativepath' ] ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ] ]
    \ },
    \ 'component': {
    \   'obsession': '%{ObsessionStatus("", "")}',
    \ },
    \ 'component_function': {
    \   'filetype': 'DevIconsFiletype',
    \   'fileformat': 'DevIconsFileformat',
    \   'gitstatus': 'GitStatus',
    \ },
    \ 'tabline': {
    \   'left': [ [ 'tabs' ] ],
    \   'right': [ [ 'close' ] ]
    \ }
    \ }

" Custom Lightline palettes
let s:palette = g:lightline#colorscheme#Tomorrow_Night_Blue#palette
let s:palette.tabline.middle = [['#ffffff', '#606087', 231, 60]]
let s:palette.tabline.right  = [['#ffffff', '#606087', 231, 60]]
let s:palette.tabline.tabsel = [['#ffffff', '#af5fff', 231, 135]]

" Prosession config
let g:prosession_tmux_title = 1
let g:prosession_tmux_title_format = ":@@@"
let g:prosession_on_startup = 1

" devicons
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''
function! DevIconsFiletype()
    return winwidth(0) > 70 ?
        \ (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft')
        \ : ''
endfunction
function! DevIconsFileformat()
    return winwidth(0) > 70 ?
        \ (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol())
        \ : ''
endfunction

""" vim-gitgutter
function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction

source ~/.vim/my/keymaps.vim

nmap <C-p> :FZF<CR>
nmap <S-p> :FZF!<CR>
nmap <C-t>p :Tags<CR>
nmap <C-t>b :BTags<CR>
nmap <Leader>f :Rg<Space>
nmap <Leader>F :RG<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>gg :GFiles<CR>
nmap <Leader>gG :GFiles!<CR>
nmap <Leader>gc :GFiles?<CR>
cmap <C-h> :History:<CR>
nmap <C-h> :Helptags<CR>

source ~/.vim/my/filetypes.vim
source ~/.vim/my/utilities.vim
