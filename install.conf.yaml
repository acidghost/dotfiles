- defaults:
    link:
      relink: true

- clean:
    "~":
    "~/.config":
    "~/.config/dotfiles-env":
    "~/.config/nnn/plugins/":
      force: true
    "~/.config/nvim":
    "~/.scripts":
    "~/.tmux/scripts":
      force: true
    "~/.vim":

- create:
    ~/wa:
      mode: 0755
    ~/.config/dotfiles-env:
      mode: 0755
    ~/.config/nvim:
      mode: 0755
    ~/.scripts:
      mode: 0755
    ~/.tmux/scripts:
      mode: 0755
    ~/.tmux/plugins:
      mode: 0755
    ~/.vim:
      mode: 0755

- shell:
  - [git submodule update --init --recursive, "Updating submodules"]
  - [rm ~/.config/dotfiles-env/* || true, "Cleaning dotfiles-env"]
  -
    command: |
      if [ "$(uname)" = Darwin ]; then
        if [ "$DOTFILES_WITH_APPS" = 1 ]; then
          mkdir -p "$HOME/Library/Application Support/Code/User"
        fi
        mkdir -p "$HOME/Library/Application Support/nushell"
      elif [ "$(uname)" = Linux ]; then
        mkdir -p "$HOME/.config/nushell"
      fi
    description: Creating OS-specific folders
    quiet: true
  -
    command: |
      if [ ! -L "$HOME/.zshrc" ] && [ -f "$HOME/.zshrc" ]; then
        mv "$HOME/.zshrc" "$HOME/.zshrc.dotfiles.bck"
      fi
      if [ ! -L "$HOME/.bashrc" ] && [ -f "$HOME/.bashrc" ]; then
        mv "$HOME/.bashrc" "$HOME/.bashrc.dotfiles.bck"
      fi
    description: Possibly making backup of existing bashrc and zshrc
    quiet: true
  - [make -C ble.sh, "Creating ble.sh script"]

- link:
    ~/.amethyst:
      path: etc/amethyst.json
      if: '[ $(uname) = Darwin ]'
    ~/.awk:
    ~/.bashrc: bash/bashrc
    ~/Brewfile:
      path: etc/Brewfile
      if: '[ "$DOTFILES_WITH_BREW" = 1 ]'
    ~/.config/alacritty:
      if: '[ "$DOTFILES_WITH_APPS" = 1 ]'
    ~/.config/atuin:
    ~/.config/btop:
    ~/.config/dotfiles-env/is_lightweight:
      path: dotfiles-env/is_lightweight
      if: '[ "$DOTFILES_IS_LIGHTWEIGHT" = 1 ]'
    ~/.config/dotfiles-env/with_apps:
      path: dotfiles-env/with_apps
      if: '[ "$DOTFILES_WITH_APPS" = 1 ]'
      force: true
    ~/.config/dotfiles-env/with_asdf:
      path: dotfiles-env/with_asdf
      if: '[ "$DOTFILES_WITH_ASDF" = 1 ]'
    ~/.config/dotfiles-env/with_lsp:
      path: dotfiles-env/with_lsp
      if: '[ "$DOTFILES_WITH_LSP" = 1 ]'
    ~/.config/dotfiles-env/with_virt:
      path: dotfiles-env/with_virt
      if: '[ "$DOTFILES_WITH_VIRT" = 1 ]'
    ~/.config/fastfetch:
    ~/.config/fzf:
    ~/.config/ghostty:
      if: '[ "$DOTFILES_WITH_APPS" = 1 ]'
    ~/.config/helix:
    ~/.config/lsd:
    ~/.config/mpv:
      if: '[ "$DOTFILES_WITH_APPS" = 1 ]'
    ~/.config/nnn/plugins:
      create: true
      glob: true
      path: nnn/plugins/*
    ~/.config/nnn/plugins/.iconlookup: nnn/plugins/.iconlookup
    ~/.config/nushell:
      glob: true
      path: nushell/*
      if: '[ "$(uname)" = Linux ]'
    ~/.config/nvim:
      glob: true
      path: nvim/*
    ~/.config/starship.toml: etc/starship.toml
    ~/.config/vifm:
    ~/.default-perl-modules:
      path: asdf/default-perl-modules
      if: '[ "$DOTFILES_WITH_ASDF" = 1 ]'
    ~/.gitconfig:
    ~/Library/Application Support/Code/User:
      glob: true
      path: vscode/*
      if: '[ "$DOTFILES_WITH_APPS" = 1 ] && [ "$(uname)" = Darwin ]'
    ~/Library/Application Support/nushell:
      glob: true
      path: nushell/*
      if: '[ "$(uname)" = Darwin ]'
    ~/.scripts:
      glob: true
      path: scripts/*
    ~/.scripts/iconlookup: nnn/plugins/.iconlookup
    ~/.scripts/tmux-list-keys: tmux/scripts/tmux-list-keys
    ~/.scripts/tmux-restore: tmux/scripts/tmux-restore
    ~/.shell:
    ~/.p10k.zsh: zsh/p10k.zsh
    ~/.tmux.conf: tmux/tmux.conf
    ~/.tmux/scripts:
      glob: true
      path: tmux/scripts/*
      exclude:
        - tmux/scripts/tmux-*
    ~/.tmux/plugins/tpm: tmux/tpm
    ~/.tool-versions:
      path: asdf/tool-versions
      if: '[ "$DOTFILES_WITH_ASDF" = 1 ]'
    ~/.vim/my: vim/my
    ~/.vim/vimrc: vim/vimrc
    ~/vusec.ascii:
    ~/.zsh_plugins.txt: zsh/plugins.txt
    ~/.zshrc: zsh/zshrc
