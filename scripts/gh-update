#!/usr/bin/env python3
import argparse, json, platform, tempfile
import subprocess as sp
from dataclasses import dataclass
from glob import glob
from pathlib import Path
from urllib.error import HTTPError
from urllib.request import urlopen


@dataclass
class CLI:
    dst_dir: Path
    yes: bool
    repo: str
    dst_filename: str


KNOWN_REPOS = {
    "atuin": ("ellie/atuin", "atuin"),
    "lsd": ("lsd-rs/lsd", "lsd"),
    "zoxide": ("ajeetdsouza/zoxide", "zoxide"),
}


def cli() -> CLI:
    parser = argparse.ArgumentParser(
        description="Download a released artifact from Github."
    )
    parser.add_argument(
        "-t",
        "--dst-dir",
        type=Path,
        default=Path("~/.local/bin"),
        help="Where to put the extracted asset",
    )
    parser.add_argument(
        "-y", "--yes", action="store_true", help="Assume yes to all questions"
    )
    parser.add_argument("repo", help="Remote repository")
    parser.add_argument("dst_filename", nargs="?", help="File to grab from the release")
    args = parser.parse_args()

    if args.repo in KNOWN_REPOS:
        args.repo, dst_filename = KNOWN_REPOS[args.repo]
        if args.dst_filename is None:
            args.dst_filename = dst_filename
    elif "/" not in args.repo:
        if args.dst_filename is None:
            args.dst_filename = args.repo
        args.repo = f"{args.repo}/{args.repo}"
    elif args.dst_filename is None:
        _, args.dst_filename = args.repo.split("/", 2)

    if args.dst_filename is None:
        print(f"[!] Could not infer asset filename (dst_filename)")
        exit(1)

    args.dst_dir = args.dst_dir.expanduser()

    return CLI(**vars(args))


def main(args: CLI) -> int:
    release = get_release(args.repo)
    if isinstance(release, int):
        return release

    print(f"[+] Latest release is {release['tag_name']} {release['html_url']}")
    recommend_idx = print_assets(release)

    if args.yes:
        if recommend_idx is None:
            print("[!] Could not recommend anything")
            return 1
        asset = release["asset"][recommend_idx]
    else:
        prompt = "[?] Select which asset to install (0 to exit"
        if recommend_idx is not None:
            prompt += f", enter for recommended {recommend_idx+1}"
        prompt += "): "

        asset = prompt_asset(prompt, recommend_idx, release)
        if isinstance(asset, int):
            return asset

    print("[+] Selection:", asset["name"])

    match Path(asset["name"]).suffixes:
        case [*_, ".tar", ".gz"] | [*_, ".zip"]:
            process_asset = from_archive
        case [*_, ".gz"]:
            process_asset = from_gzip
        case suffixes:
            print(f"[!] Unable to recognize suffixes: {suffixes}")
            return 1

    with (
        tempfile.TemporaryDirectory(prefix="gh-update-") as tmp,
        urlopen(asset["browser_download_url"]) as rep,
    ):
        args.dst_dir.mkdir(parents=True, exist_ok=True)
        r = process_asset(args, rep.read(), tmp)
        if r is not None:
            return r

    return 0


def get_release(repo: str, ver: str = "latest") -> dict | int:
    latest_release_url = f"https://api.github.com/repos/{repo}/releases/{ver}"
    print(f"[+] Making request to {latest_release_url}")
    try:
        with urlopen(latest_release_url) as req:
            return json.load(req)
    except HTTPError as e:
        print(f"[!] Failed to make request: {e.reason}")
        return 1


def print_assets(release: dict) -> int | None:
    uname = platform.uname()
    this_system = uname.system.lower()
    match uname.machine.lower():
        case "amd64" | "x86_64":
            this_machine = ["amd64", "x86_64"]
        case "arm64" | "aarch64":
            this_machine = ["arm64", "aarch64"]
        case machine:
            this_machine = [machine]

    recommend_idx = None
    for i, asset in enumerate(release["assets"]):
        name = asset["name"].lower()
        recommend = " "
        if this_system in name:
            for m in this_machine:
                if m in name:
                    recommend = "*"
                    if recommend_idx is None:
                        recommend_idx = i
                    break
        print(f"    {i+1:02d} {recommend} {asset['browser_download_url']}")
    return recommend_idx


def prompt_asset(prompt: str, recommend_idx: int | None, release: dict) -> dict | int:
    while True:
        i = input(prompt)
        if i == "":
            i = recommend_idx
        else:
            try:
                i = int(i)
            except ValueError:
                continue
            if i == 0:
                return 0
            i -= 1
        try:
            return release["assets"][i]
        except IndexError:
            continue


def from_archive(args: CLI, asset: bytes, tmp: str) -> int | None:
    print(f"[-] Extracting with 'tar -z'")
    sp.run(["tar", "-xzf", "-", "-C", tmp], check=True, input=asset)

    files = glob(f"{tmp}/**/{args.dst_filename}", recursive=True)
    if len(files) == 0:
        print(f"[!] No file matches the glob **/{args.dst_filename}")
        return 1

    print(f"[-] Found {files}")
    sp.run(["chmod", "+x", *files], check=True)
    print(f"[-] Moving them to {args.dst_dir}")
    sp.run(["cp", *files, str(args.dst_dir)], check=True)


def from_gzip(args: CLI, asset: bytes, tmp: str) -> int | None:
    print(f"[-] Extracting with 'gunzip -d'")
    p = sp.run(
        ["gunzip", "-d", "-"],
        cwd=tmp,
        check=True,
        input=asset,
        capture_output=True,
    )

    dst_filename = args.dst_dir / args.dst_filename
    print(f"[-] Writing to {dst_filename}")
    dst_filename.write_bytes(p.stdout)
    sp.run(["chmod", "+x", str(dst_filename)], check=True)


if __name__ == "__main__":
    try:
        exit(main(cli()))
    except KeyboardInterrupt:
        print("Bye-bye!")
