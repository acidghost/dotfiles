#!/usr/bin/env python3
import argparse, json, platform, tempfile
import subprocess as sp
from dataclasses import dataclass
from glob import glob
from pathlib import Path
from urllib.error import HTTPError
from urllib.request import urlopen


@dataclass
class CLI:
    dst_dir: Path
    repo: str
    dst_filename: str


def cli() -> CLI:
    parser = argparse.ArgumentParser(
        description="Download a released artifact from Github."
    )
    parser.add_argument(
        "-t",
        "--dst-dir",
        type=Path,
        default=Path("~/.local/bin"),
        help="Where to put the extracted asset",
    )
    parser.add_argument("repo", help="Remote repository")
    parser.add_argument("dst_filename", help="File to grab from the release")
    return CLI(**vars(parser.parse_args()))


def get_release(repo: str, ver: str = "latest") -> dict | int:
    latest_release_url = f"https://api.github.com/repos/{repo}/releases/{ver}"
    print(f"[+] Making request to {latest_release_url}")
    try:
        with urlopen(latest_release_url) as req:
            rep = json.load(req)
    except HTTPError as e:
        print(f"[!] Failed to make request: {e.reason}")
        return 1
    return rep


def main(args: CLI) -> int:
    args.dst_dir = args.dst_dir.expanduser()
    uname = platform.uname()
    this_system = uname.system.lower()
    match uname.machine.lower():
        case "amd64" | "x86_64":
            this_machine = ["amd64", "x86_64"]
        case "arm64" | "aarch64":
            this_machine = ["arm64", "aarch64"]
        case machine:
            this_machine = [machine]

    rep = get_release(args.repo)
    if isinstance(rep, int):
        return rep

    print(f"[+] Latest release is {rep['tag_name']} {rep['html_url']}")
    recommend_idx = None
    for i, asset in enumerate(rep["assets"]):
        name = asset["name"].lower()
        recommend = " "
        if this_system in name:
            for m in this_machine:
                if m in name:
                    recommend = "*"
                    if recommend_idx is None:
                        recommend_idx = i
                    break
        print(f"    {i+1:02d} {recommend} {asset['browser_download_url']}")

    prompt = "[?] Select which asset to install (0 to exit"
    if recommend_idx is not None:
        prompt += f", enter for recommended {recommend_idx+1}"
    prompt += "): "
    while True:
        inp = input(prompt)
        if inp == "":
            inp = recommend_idx
        else:
            try:
                inp = int(inp)
            except ValueError:
                continue
            if inp == 0:
                return 0
            inp -= 1
        try:
            asset = rep["assets"][inp]
        except IndexError:
            continue
        break

    print("[+] Selection:", asset["name"])

    with (
        tempfile.TemporaryDirectory(prefix="gh-update-") as tmp,
        urlopen(asset["browser_download_url"]) as req,
    ):
        asset_name = Path(asset["name"])
        args.dst_dir.mkdir(parents=True, exist_ok=True)
        dst_filename = args.dst_dir / args.dst_filename
        match asset_name.suffixes:
            case [*_, ".tar", ".gz"] | [*_, ".zip"]:
                print(f"[-] Extracting with 'tar -z'")
                sp.run(["tar", "-xzf", "-", "-C", tmp], check=True, input=req.read())
                files = glob(f"{tmp}/**/{args.dst_filename}", recursive=True)
                if len(files) == 0:
                    print(f"[!] No file matches the glob **/{args.dst_filename}")
                    return 1
                print(f"[-] Found {files}")
                sp.run(["chmod", "+x", *files], check=True)
                print(f"[-] Moving them to {args.dst_dir}")
                sp.run(["cp", *files, str(args.dst_dir)], check=True)
            case [*_, ".gz"]:
                print(f"[-] Extracting with 'gunzip -d'")
                p = sp.run(
                    ["gunzip", "-d", "-"],
                    cwd=tmp,
                    check=True,
                    input=req.read(),
                    capture_output=True,
                )
                print(f"[-] Writing to {dst_filename}")
                dst_filename.write_bytes(p.stdout)
                sp.run(["chmod", "+x", str(dst_filename)], check=True)
            case suffixes:
                print(f"[!] Unable to recognize suffixes: {suffixes}")
                return 1

    return 0


if __name__ == "__main__":
    try:
        exit(main(cli()))
    except KeyboardInterrupt:
        print("Bye-bye!")
