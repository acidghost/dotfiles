#!/usr/bin/env python3
import argparse, json, platform, tempfile
import subprocess as sp
from glob import glob
from pathlib import Path
from platform import uname
from typing import NamedTuple, Optional, Union
from urllib.error import HTTPError
from urllib.request import urlopen


class CLI(NamedTuple):
    dst_dir: Path
    yes: bool
    plain: bool
    repo: str
    dst_filename: str


KNOWN_REPOS = {
    "atuin": ("atuinsh/atuin", "atuin"),
    "delta": ("dandavison/delta", "delta"),
    "jless": ("PaulJuliusMartinez/jless", "jless"),
    "lsd": ("lsd-rs/lsd", "lsd"),
    "zoxide": ("ajeetdsouza/zoxide", "zoxide"),
}


def cli() -> CLI:
    parser = argparse.ArgumentParser(
        description="Download a released artifact from Github."
    )
    parser.add_argument(
        "-t",
        "--dst-dir",
        type=Path,
        default=Path("~/.local/bin"),
        help="Where to put the extracted asset",
    )
    parser.add_argument(
        "-y", "--yes", action="store_true", help="Assume yes to all questions"
    )
    parser.add_argument(
        "-p",
        "--plain",
        action="store_true",
        help="Force treating the asset as plain file",
    )
    parser.add_argument("repo", help="Remote repository")
    parser.add_argument("dst_filename", nargs="?", help="File to grab from the release")
    args = parser.parse_args()

    if args.repo in KNOWN_REPOS:
        args.repo, dst_filename = KNOWN_REPOS[args.repo]
        if args.dst_filename is None:
            args.dst_filename = dst_filename
    elif "/" not in args.repo:
        if args.dst_filename is None:
            args.dst_filename = args.repo
        args.repo = f"{args.repo}/{args.repo}"
    elif args.dst_filename is None:
        _, args.dst_filename = args.repo.split("/", 2)

    if args.dst_filename is None:
        print(f"[!] Could not infer asset filename (dst_filename)")
        exit(1)

    args.dst_dir = args.dst_dir.expanduser()

    return CLI(**vars(args))


def main(args: CLI) -> int:
    release = get_release(args.repo)
    if isinstance(release, int):
        return release

    print(f"[+] Latest release is {release['tag_name']} {release['html_url']}")
    recommend_idx = print_assets(release)

    if args.yes:
        if recommend_idx is None:
            print("[!] Could not recommend anything")
            return 1
        asset = release["assets"][recommend_idx]
    else:
        prompt = "[?] Select which asset to install (0 to exit"
        if recommend_idx is not None:
            prompt += f", enter for recommended {recommend_idx+1}"
        prompt += "): "

        asset = prompt_asset(prompt, recommend_idx, release)
        if isinstance(asset, int):
            return asset

    print("[+] Selection:", asset["name"])

    if args.plain:
        process_asset = from_plain
    else:
        suffixes = Path(asset["name"]).suffixes
        if suffixes[-2:] == [".tar", ".gz"]:
            process_asset = from_archive_tar
        elif suffixes[-1] == ".gz":
            process_asset = from_gzip
        elif suffixes[-1] == ".zip":
            uname_system = uname().system
            if uname_system == "Linux":
                process_asset = from_archive_zip
            elif uname_system == "Darwin":
                process_asset = from_archive_tar
            else:
                print(f"[!] I don't know how to handle .zip in {uname_system}")
                return 1
        elif suffixes == []:
            process_asset = from_plain
        else:
            print(f"[!] Unable to recognize suffixes: {suffixes}")
            return 1

    with tempfile.TemporaryDirectory(prefix="gh-update-") as tmp:
        with urlopen(asset["browser_download_url"]) as rep:
            args.dst_dir.mkdir(parents=True, exist_ok=True)
            r = process_asset(args, rep.read(), tmp)
            if r is not None:
                return r

    return 0


def get_release(repo: str, ver: str = "latest") -> Union[dict, int]:
    latest_release_url = f"https://api.github.com/repos/{repo}/releases/{ver}"
    print(f"[+] Making request to {latest_release_url}")
    try:
        with urlopen(latest_release_url) as req:
            return json.load(req)
    except HTTPError as e:
        print(f"[!] Failed to make request: {e.reason}")
        return 1


def print_assets(release: dict) -> Optional[int]:
    uname = platform.uname()
    this_system = uname.system.lower()
    this_machine = uname.machine.lower()
    ARCH_X86 = ["x86_64", "amd64"]
    ARCH_ARM = ["aarch64", "arm64"]
    if this_machine in ARCH_X86:
        this_machine = ARCH_X86
    elif this_machine in ARCH_ARM:
        this_machine = ARCH_ARM
    else:
        this_machine = [this_machine]

    recommend_idx = None
    for i, asset in enumerate(release["assets"]):
        name = asset["name"].lower()
        recommend = " "
        if this_system in name:
            for m in this_machine:
                if m in name:
                    recommend = "*"
                    if recommend_idx is None:
                        recommend_idx = i
                    break
        print(f"    {i+1:02d} {recommend} {asset['browser_download_url']}")
    return recommend_idx


def prompt_asset(
    prompt: str, recommend_idx: Optional[int], release: dict
) -> Union[dict, int]:
    while True:
        i = input(prompt)
        if i == "":
            i = recommend_idx
        else:
            try:
                i = int(i)
            except ValueError:
                continue
            if i == 0:
                return 0
            i -= 1
        try:
            return release["assets"][i]
        except IndexError:
            continue


def from_archive_tar(args: CLI, asset: bytes, tmp: str) -> Optional[int]:
    print(f"[-] Extracting with 'tar -z'")
    sp.run(["tar", "-xzf", "-", "-C", tmp], check=True, input=asset)

    files = glob(f"{tmp}/**/{args.dst_filename}", recursive=True)
    if len(files) == 0:
        print(f"[!] No file matches the glob **/{args.dst_filename}")
        return 1

    print(f"[-] Found {files}")
    sp.run(["chmod", "+x", *files], check=True)
    print(f"[-] Moving them to {args.dst_dir}")
    sp.run(["cp", *files, str(args.dst_dir)], check=True)


def from_archive_zip(args: CLI, asset: bytes, tmp: str) -> Optional[int]:
    tmp_p = Path(tmp)
    zipfile = tmp_p / "asset.zip"
    print(f"[-] Saving .zip to {zipfile}")
    zipfile.write_bytes(asset)

    print(f"[-] Extracting with 'unzip'")
    out_p = tmp_p / "out"
    sp.run(["unzip", "-d", out_p, zipfile], check=True)

    files = glob(str(out_p / "**" / args.dst_filename), recursive=True)
    if len(files) == 0:
        print(f"[!] No file matches the glob **/{args.dst_filename}")
        return 1

    print(f"[-] Found {files}")
    sp.run(["chmod", "+x", *files], check=True)
    print(f"[-] Moving them to {args.dst_dir}")
    sp.run(["cp", *files, str(args.dst_dir)], check=True)


def from_gzip(args: CLI, asset: bytes, tmp: str) -> Optional[int]:
    print(f"[-] Extracting with 'gunzip -d'")
    p = sp.run(
        ["gunzip", "-d", "-"],
        cwd=tmp,
        check=True,
        input=asset,
        capture_output=True,
    )

    dst_filename = args.dst_dir / args.dst_filename
    print(f"[-] Writing to {dst_filename}")
    dst_filename.write_bytes(p.stdout)
    sp.run(["chmod", "+x", str(dst_filename)], check=True)


def from_plain(args: CLI, asset: bytes, _) -> Optional[int]:
    dst_filename = args.dst_dir / args.dst_filename
    print(f"[-] Writing plain file to {dst_filename}")
    dst_filename.write_bytes(asset)
    sp.run(["chmod", "+x", str(dst_filename)], check=True)


if __name__ == "__main__":
    try:
        exit(main(cli()))
    except KeyboardInterrupt:
        print("Bye-bye!")
